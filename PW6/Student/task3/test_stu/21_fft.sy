const int maxn = 1025;
const int mod = 998244353, R = 3;

int n, m, lg;
int a[maxn], b[maxn], c[maxn];
int ho[maxn];
const int power2[20] = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288};

int modmul(int a, int b) {
    if (!b) {
        return 0;
    }
    int res = modmul(a, b / 2);
    res = (res + res) % mod;
    if (b % 2) {
        res = (res + a) % mod;
    }
    return res;
}

int quick_pow(int a, int b) {
    if (!b) {
        return 1;
    }
    int res = quick_pow(a, b / 2);
    res = modmul(res, res);
    if (b % 2) {
        res = modmul(res, a);
    }
    return res;
}

void fft(int a[], int in) {
    int i = 0;
    while (i < m) {
        ho[i] = ho[i / 2] / 2;
        if (i % 2) {
            ho[i] = ho[i] + power2[lg - 1];
        }
        if (i < ho[i]) {
            int tmp = a[i];
            a[i] = a[ho[i]];
            a[ho[i]] = tmp;
        }
        i = i + 1;
    }
    i = 1;
    while (i < m) {
        int omega = quick_pow(R, (mod - 1) / (i * 2));
        int j = 0;
        while (j < m) {
            int omg = 1;
            int k = 0;
            while (k < i) {
                int y = modmul(omg, a[j + k + i]);
                a[j + k + i] = (a[j + k] - y + mod) % mod;
                a[j + k] = (a[j + k] + y) % mod;
                omg = modmul(omg, omega);
                k = k + 1;
            }
            j = j + i * 2;
        }
        i = i * 2;
    }
    if (in == -1) {
        int i = 1;
        while (i < m - i) {
            int tmp = a[i];
            a[i] = a[m - i];
            a[m - i] = tmp;
            i = i + 1;
        }
        int fn = quick_pow(m, mod - 2);
        i = 0;
        while (i < m) {
            a[i] = modmul(a[i], fn);
            i = i + 1;
        }
    }
}

int main() {
    int i;
    n = getint();
    i = 0;
    while (i < n) {
        a[i] = getint();
        a[i] = (a[i] % mod + mod) % mod;
        i = i + 1;
    }
    m = getint();
    i = 0;
    while (i < n) {
        b[i] = getint();
        b[i] = (b[i] % mod + mod) % mod;
        i = i + 1;
    }
    n = n + m - 1;
    m = 1; lg = 0;
    while (m < n) {
        m = m * 2;
        lg = lg + 1;
    }
    fft(a, 1);
    fft(b, 1);
    i = 0;
    while (i < m) {
        c[i] = modmul(a[i], b[i]);
        i = i + 1;
    }
    fft(c, -1);
    i = 0;
    putint(n);
    while (i < n) {
        putch(32);
        if (c[i] > mod / 2) {
            c[i] = c[i] - mod;
        }
        putint(c[i]);
        i = i + 1;
    }
    putch(10);
    return 0;
}